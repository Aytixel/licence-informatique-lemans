<!DOCTYPE html>
<html lang="fr-FR">

<head>
    <link rel="alternate" hreflang="fr" href="https://app.licence-informatique-lemans.tk/">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="Aytixel">
    <meta name="description" content="Web App non officiel de la Licence Informatique du Mans">
    <meta name="theme-color" content="#009c9a">
    <title>Licence Informatique LeMans - Web App</title>
    <link rel="preload stylesheet" as="style" type="text/css" href="/css/font.css">
    <link rel="preload stylesheet" as="style" type="text/css" href="/css/palette.css">
    <link rel="preload stylesheet" as="style" type="text/css" href="/css/index.css">
    <script>
        function debounce(callback, delay) {
            let timer;

            return function () {
                const args = arguments;
                const context = this;

                clearTimeout(timer);

                timer = setTimeout(() => callback.apply(context, args), delay)
            }
        }
        function throttle(callback, delay) {
            let last, timer;

            return function () {
                let context = this, now = +new Date(), args = arguments;

                if (last && now < last + delay) {
                    clearTimeout(timer);

                    timer = setTimeout(() => {
                        last = now;
                        callback.apply(context, args);
                    }, delay);
                } else {
                    last = now;
                    callback.apply(context, args);
                }
            };
        }
        const keep_only_date = (date) => {
            time = new Date(date).getTime();

            return new Date(time - (time % (1000 * 60 * 60 * 24)));
        }
        const compare_date = (date1, date2) => new Date(date2).getTime() - new Date(date1).getTime();
        const add_days = (date, day) => new Date(new Date(date).getTime() + (day * 1000 * 60 * 60 * 24));
        let planning_resources_name;
        let planning_resources_type;
        const planning_resources_loaded = (async () => {
            planning_resources_name = await (await fetch("https://api.licence-informatique-lemans.tk/v2/planning-resources-name.json")).json();
            planning_resources_type = await (await fetch("https://api.licence-informatique-lemans.tk/v2/planning-resources-type.json")).json();
        })();

        if (!Array.isArray(JSON.parse(localStorage.getItem("favorites")))) localStorage.setItem("favorites", "[]");

        screen?.orientation?.lock("natural").catch(() => console.log("Can't lock screen orientation !"))

        let loader_count = 0;

        const start_loader = () => {
            loader_count++;

            document.getElementById("menu-button").classList.add("loading");
        };

        const end_loader = () => {
            document.getElementById("menu-button").classList.toggle("loading", loader_count = Math.max(0, loader_count - 1));
        };
    </script>
    <script src="https://unpkg.com/mol_time_all/web.js" async></script>
    <script src="/js/scroll.js" async></script>
    <script src="/js/scroll-snap.js" async></script>
    <script src="/js/component.js" async></script>
    <script src="/js/index.js" async defer></script>
    <script src="/js/izly.js" async defer></script>
</head>

<body>
    <div id="top-bar">
        <h1>Pas de formation</h1>
        <h2>sélectionner</h2>
        <a href="#" id="menu-button" aria-label="Menu">
            <div></div>
        </a>
    </div>
    <dialog id="menu">
        <ul>
            <li id="izly">
                <details>
                    <summary>
                        <h3>Izly</h3>
                    </summary>
                    <form id="izly-connection-form">
                        <input type="email" name="email" required placeholder="Email du compte Izly">
                        <input type="password" name="code" required placeholder="Code secret" pattern="[0-9]*">
                        <div id="izly-tos">
                            <input type="checkbox" required aria-label="Condition d'utilisation case à cocher">
                            <details>
                                <summary>Condition d'utilisation</summary>
                                Votre email et code secret seront envoyés aux serveurs à chaque fois, mais jamais ils ne
                                seront enregistrés, de même que tout autre information récupérer depuis votre compte
                                Izly. Toutes vos informations sont stockées localement sur votre appareil. Toutefois
                                nous ne pouvons garantir qu'il n'y aura aucun problème avec votre compte Izly. Utilisez
                                donc cette fonctionnalité à vos risque et péril.
                            </details>
                        </div>
                        <input type="submit" value="Se connecter">
                    </form>
                    <div id="izly-pay">
                        <img id="izly-qrcode" src="" alt="Qrcode Izly">
                        <div id="izly-email"></div>
                        <div id="izly-balance"></div>
                        <input id="izly-change-account" type="submit" value="Changer de compte">
                    </div>
                </details>
            </li>
            <li>
                <h3>Formations</h3>
                <ul id="study-level"></ul>
            </li>
            <li>
                <h3>Bâtiment</h3>
                <ul id="place"></ul>
            </li>
            <li>
                <h3>Salle disponible</h3>
                <ul id="room"></ul>
            </li>
        </ul>
    </dialog>
    <planning-viewer></planning-viewer>
    <script>
        if (!navigator.onLine) document.body.classList.add("offline")

        window.addEventListener("offline", () => document.body.classList.add("offline"))
        window.addEventListener("online", () => document.body.classList.remove("offline"))
    </script>
</body>

</html>